{"version":3,"sources":["features/location/locationSlice.js","components/Location.js","components/Search.js","components/Map.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["locationSlice","createSlice","name","initialState","locations","reducers","addLocation","state","action","push","payload","actions","selectLocation","location","Location","useSelector","map","loc","index","position","lat","lng","Search","panTo","dispatch","useDispatch","searchRef","React","useRef","onSearchLoad","useCallback","search","current","onLoad","onPlacesChanged","getPlaces","geometry","type","placeholder","className","libraries","mapContainerStyle","width","height","center","options","disableDefaultUI","Map","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","mapRef","onMapLoad","setZoom","zoom","App","store","configureStore","reducer","locationReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAMaA,EAAgBC,YAAY,CACvCC,KAAM,WACNC,aANmB,CACnBC,UAAW,IAMXC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMH,UAAUK,KAAKD,EAAOE,aAKnBJ,EAAgBN,EAAcW,QAA9BL,YAEFM,EAAiB,SAACL,GAAD,OAAWA,EAAMM,SAAST,WAEzCJ,IAAf,Q,OCHec,MAZf,WACE,IAAMV,EAAYW,YAAYH,GAE9B,OACE,mCACGR,EAAUY,KAAI,SAACC,EAAKC,GAAN,OACb,cAAC,IAAD,CAAoBC,SAAU,CAAEC,IAAKH,EAAIG,IAAKC,IAAKJ,EAAII,MAA1CH,SCyBNI,MA/Bf,YAA4B,IAAVC,EAAS,EAATA,MACVC,EAAWC,cAEXC,EAAYC,IAAMC,SAElBC,EAAeF,IAAMG,aAAY,SAACC,GACtCL,EAAUM,QAAUD,IACnB,IAYH,OACE,mCACE,cAAC,IAAD,CACEE,OAAQJ,EACRK,gBAdkB,WACtB,MAAqBR,EAAUM,QAAQG,YAAY,GAAGC,SAASvB,SAAvDO,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IACPR,EAAW,CACfO,IAAKA,IACLC,IAAKA,KAEPG,EAASlB,EAAYO,IACrBU,EAAMV,IAKJ,SAIE,uBAAOwB,KAAK,OAAOC,YAAY,mBAAmBC,UAAU,gBCxB9DC,EAAY,CAAC,UAEbC,EAAoB,CACxBC,MAAO,QACPC,OAAQ,SAGJC,EAAS,CACbxB,IAAK,UACLC,KAAM,UAGFwB,EAAU,CACdC,kBAAkB,GAwCLC,MArCf,WACE,MAAgCC,YAAc,CAC5CC,iBAAkBC,0CAClBV,cAFMW,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAKZC,EAAS1B,IAAMC,SAEf0B,EAAY3B,IAAMG,aAAY,SAACd,GACnCqC,EAAOrB,QAAUhB,IAChB,IAEGO,EAAQI,IAAMG,aAAY,YAAmB,IAAhBV,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IACtCgC,EAAOrB,QAAQT,MAAM,CAAEH,MAAKC,QAC5BgC,EAAOrB,QAAQuB,QAAQ,KACtB,IAEH,OAAIH,EACK,yEAGFD,EACL,eAAC,IAAD,CACEV,kBAAmBA,EACnBe,KAAM,EACNZ,OAAQA,EACRC,QAASA,EACTZ,OAAQqB,EALV,UAOE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQ/B,MAAOA,OAGjB,cAAC,IAAD,KChDWkC,MAJf,WACE,OAAO,cAAC,EAAD,KCDIC,EAAQC,YAAe,CAClCC,QAAS,CACP/C,SAAUgD,KCOMC,QACW,cAA7BC,OAAOlD,SAASmD,UAEe,UAA7BD,OAAOlD,SAASmD,UAEhBD,OAAOlD,SAASmD,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.702918f2.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  locations: [],\r\n};\r\n\r\nexport const locationSlice = createSlice({\r\n  name: \"location\",\r\n  initialState,\r\n  reducers: {\r\n    addLocation: (state, action) => {\r\n      state.locations.push(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addLocation } = locationSlice.actions;\r\n\r\nexport const selectLocation = (state) => state.location.locations;\r\n\r\nexport default locationSlice.reducer;\r\n","import React from \"react\";\r\nimport { Marker } from \"@react-google-maps/api\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectLocation } from \"../features/location/locationSlice\";\r\n\r\nfunction Location() {\r\n  const locations = useSelector(selectLocation);\r\n\r\n  return (\r\n    <>\r\n      {locations.map((loc, index) => (\r\n        <Marker key={index} position={{ lat: loc.lat, lng: loc.lng }} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StandaloneSearchBox } from \"@react-google-maps/api\";\r\nimport { addLocation } from \"../features/location/locationSlice\";\r\n\r\nfunction Search({ panTo }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const searchRef = React.useRef();\r\n\r\n  const onSearchLoad = React.useCallback((search) => {\r\n    searchRef.current = search;\r\n  }, []);\r\n\r\n  const onPlacesChanged = () => {\r\n    const { lat, lng } = searchRef.current.getPlaces()[0].geometry.location;\r\n    const location = {\r\n      lat: lat(),\r\n      lng: lng(),\r\n    };\r\n    dispatch(addLocation(location));\r\n    panTo(location);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StandaloneSearchBox\r\n        onLoad={onSearchLoad}\r\n        onPlacesChanged={onPlacesChanged}\r\n      >\r\n        <input type=\"text\" placeholder=\"Search places...\" className=\"search\" />\r\n      </StandaloneSearchBox>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { GoogleMap, useLoadScript } from \"@react-google-maps/api\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Location from \"./Location\";\r\nimport Search from \"./Search\";\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst mapContainerStyle = {\r\n  width: \"100vw\",\r\n  height: \"100vh\",\r\n};\r\n\r\nconst center = {\r\n  lat: 37.389091,\r\n  lng: -5.984459,\r\n};\r\n\r\nconst options = {\r\n  disableDefaultUI: true,\r\n};\r\n\r\nfunction Map() {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries,\r\n  });\r\n\r\n  const mapRef = React.useRef();\r\n\r\n  const onMapLoad = React.useCallback((map) => {\r\n    mapRef.current = map;\r\n  }, []);\r\n\r\n  const panTo = React.useCallback(({ lat, lng }) => {\r\n    mapRef.current.panTo({ lat, lng });\r\n    mapRef.current.setZoom(9);\r\n  }, []);\r\n\r\n  if (loadError) {\r\n    return <div>Map cannot be loaded right now, sorry.</div>;\r\n  }\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={mapContainerStyle}\r\n      zoom={5}\r\n      center={center}\r\n      options={options}\r\n      onLoad={onMapLoad}\r\n    >\r\n      <Location />\r\n      <Search panTo={panTo} />\r\n    </GoogleMap>\r\n  ) : (\r\n    <ClipLoader />\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\nimport Map from \"./components/Map\";\n\nfunction App() {\n  return <Map />;\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport locationReducer from \"../features/location/locationSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    location: locationReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}